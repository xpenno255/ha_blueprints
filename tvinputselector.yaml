blueprint:
  name: TV — Select Input v1.2
  description: >
    Select a TV/media_player and a source from the Living Room TV input list helper.
    If the TV is off, it powers on, waits, then switches to the chosen input.
  domain: script
  input:
    tv:
      name: TV / Media Player
      selector:
        entity:
          domain: media_player

    desired_input:
      name: Input / Source
      description: Pick the TV input from the Living Room helper list.
      selector:
        state:
          entity_id: input_select.living_room_tv_input_list  # hard-linked to your helper

    power_on_timeout:
      name: Power-on timeout (seconds)
      default: 90
      selector:
        number:
          min: 5
          max: 300
          unit_of_measurement: s
          mode: slider

    source_list_timeout:
      name: Source list availability timeout (seconds)
      default: 45
      selector:
        number:
          min: 5
          max: 180
          unit_of_measurement: s
          mode: slider

    settle_delay:
      name: Extra settle delay after power-on (seconds)
      default: 3
      selector:
        number:
          min: 0
          max: 20
          unit_of_measurement: s
          mode: slider

mode: restart
max_exceeded: silent

variables:
  tv: !input tv
  desired_input: !input desired_input
  power_on_timeout: !input power_on_timeout
  source_list_timeout: !input source_list_timeout
  settle_delay: !input settle_delay

  source_list: "{{ state_attr(tv, 'source_list') or [] }}"
  desired_norm: "{{ desired_input | lower | trim }}"
  source_list_norm: "{{ source_list | map('string') | map('lower') | list }}"
  matched_source: >
    {% set d = desired_norm %}
    {% set candidates = source_list | list %}
    {% set norm = source_list_norm %}
    {% set exact = (norm.index(d) if d in norm else none) %}
    {% if exact is not none %}
      {{ candidates[exact] }}
    {% else %}
      {% set starts = [] %}
      {% for i in range(norm|length) %}
        {% if norm[i].startswith(d) %}{% set _ = starts.append(i) %}{% endif %}
      {% endfor %}
      {% if starts %}
        {{ candidates[starts[0]] }}
      {% else %}
        {% set contains = [] %}
        {% for i in range(norm|length) %}
          {% if d in norm[i] %}{% set _ = contains.append(i) %}{% endif %}
        {% endfor %}
        {% if contains %}
          {{ candidates[contains[0]] }}
        {% else %}
          {{ desired_input }}
        {% endif %}
      {% endif %}
    {% endif %}

sequence:
  - alias: Power on if off
    if:
      - condition: state
        entity_id: !input tv
        state: "off"
    then:
      - service: media_player.turn_on
        target:
          entity_id: !input tv
      - wait_template: "{{ states(tv) not in ['off','unavailable','unknown'] }}"
        timeout: "{{ power_on_timeout }}"
      - delay:
          seconds: "{{ settle_delay }}"

  - alias: Optionally wait for source_list
    wait_template: >
      {{ (state_attr(tv, 'source_list') or []) | count > 0
         or states(tv) not in ['off','unavailable','unknown'] }}
    timeout: "{{ source_list_timeout }}"
    continue_on_timeout: true

  - alias: Switch input
    service: media_player.select_source
    target:
      entity_id: !input tv
    data:
      source: "{{ matched_source }}"

  - service: logbook.log
    data:
      name: "TV Input"
      message: "Selected '{{ desired_input }}' → using '{{ matched_source }}' on {{ tv }}."
      entity_id: !input tv
