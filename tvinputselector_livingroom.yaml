blueprint:
  name: TV — Select Input v1.4
  description: >
    Creates a script (one per input) for media_player.lg_webos_smart_tv.
    Choose the TV input once (from input_select.living_room_tv_input_list) and set a fixed
    Sonos Playbar volume for media_player.living_room_sonos. Power-on timing is hard-coded
    here so updating the blueprint updates all scripts.

  domain: script

  input:
    desired_input:
      name: Input / Source (choose once)
      description: Select from your helper; the chosen value is baked into this script instance.
      selector:
        state:
          entity_id: input_select.living_room_tv_input_list

    volume_level:
      name: Sonos volume (0.00–1.00)
      description: Per-script target volume for media_player.living_room_sonos.
      default: 0.25
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

mode: restart
max_exceeded: silent

# -------- Tunable constants (edit here to affect ALL scripts using this blueprint) --------
variables:
  tv: media_player.lg_webos_smart_tv
  sonos: media_player.living_room_sonos

  power_on_timeout: 90        # seconds to wait for TV to become responsive after power on
  source_list_timeout: 45     # seconds to wait for source_list to appear (continues on timeout)
  settle_delay: 3             # extra delay after power-on before switching input

  # Fixed per-script inputs
  desired_input: !input desired_input
  volume_level: !input volume_level

  # Matching helpers (be tolerant of minor name differences)
  source_list: "{{ state_attr(tv, 'source_list') or [] }}"
  desired_norm: "{{ (desired_input or '') | string | lower | trim }}"
  source_list_norm: "{{ source_list | map('string') | map('lower') | list }}"
  matched_source: >
    {% set d = desired_norm %}
    {% set candidates = source_list | list %}
    {% set norm = source_list_norm %}
    {% set exact = (norm.index(d) if d in norm else none) %}
    {% if exact is not none %}
      {{ candidates[exact] }}
    {% else %}
      {% set starts = [] %}
      {% for i in range(norm|length) %}
        {% if norm[i].startswith(d) %}{% set _ = starts.append(i) %}{% endif %}
      {% endfor %}
      {% if starts %}
        {{ candidates[starts[0]] }}
      {% else %}
        {% set contains = [] %}
        {% for i in range(norm|length) %}
          {% if d in norm[i] %}{% set _ = contains.append(i) %}{% endif %}
        {% endfor %}
        {% if contains %}
          {{ candidates[contains[0]] }}
        {% else %}
          {{ desired_input }}  {# fall back to chosen value #}
        {% endif %}
      {% endif %}
    {% endif %}

sequence:
  - alias: Power on TV if off
    if:
      - condition: state
        entity_id: media_player.lg_webos_smart_tv
        state: "off"
    then:
      - service: media_player.turn_on
        target:
          entity_id: media_player.lg_webos_smart_tv
      - alias: Wait until TV becomes responsive
        wait_template: "{{ states(tv) not in ['off','unavailable','unknown'] }}"
        timeout: "{{ power_on_timeout }}"
      - delay:
          seconds: "{{ settle_delay }}"

  - alias: Optionally wait for source_list
    wait_template: >
      {{ (state_attr(tv, 'source_list') or []) | count > 0
         or states(tv) not in ['off','unavailable','unknown'] }}
    timeout: "{{ source_list_timeout }}"
    continue_on_timeout: true

  - alias: Switch to fixed input
    service: media_player.select_source
    target:
      entity_id: media_player.lg_webos_smart_tv
    data:
      source: "{{ matched_source }}"

  - alias: Set Sonos Playbar volume
    service: media_player.volume_set
    target:
      entity_id: media_player.living_room_sonos
    data:
      volume_level: "{{ volume_level | float }}"

  - service: logbook.log
    data:
      name: "TV Input + Volume"
      message: >
        Fixed input '{{ desired_input }}' → using '{{ matched_source }}' on {{ tv }}.
        Set Sonos volume to {{ (volume_level | float) | round(2) }}.
      entity_id: media_player.lg_webos_smart_tv

