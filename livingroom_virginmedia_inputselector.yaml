blueprint:
  name: Living Room TV Virgin Media Input Selector v1.0
  description: >
    Powers on Virgin Media box and LG webOS TV, tunes a Virgin channel (chosen once per script),
    then switches the TV to the fixed input "Virgin(West Midlands) Set-Top Box" and sets Sonos volume.
    Channel comes from input_select.virgin_media_input_list. Timings are hard-coded here.

  domain: script

  input:
    virgin_channel:
      name: Virgin channel (choose once)
      selector:
        state:
          entity_id: input_select.virgin_media_input_list

    volume_level:
      name: Sonos volume (0.00–1.00, per script)
      description: Target volume for media_player.living_room_sonos
      default: 0.35
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

mode: restart
max_exceeded: silent

# -------- Global constants --------
variables:
  tv: media_player.lg_webos_smart_tv
  virgin: media_player.virgin_tv
  sonos: media_player.living_room_sonos

  # Timings
  tv_power_on_timeout: 10
  tv_source_list_timeout: 3
  tv_settle_delay: 3

  virgin_power_on_timeout: 5
  virgin_settle_delay: 1

  # Fixed values
  desired_input: "Virgin(West Midlands) Set-Top Box"
  desired_channel: !input virgin_channel
  volume_level: !input volume_level

  # TV input matching helpers (tolerant of name variance)
  source_list: "{{ state_attr(tv, 'source_list') or [] }}"
  desired_norm: "{{ desired_input | lower | trim }}"
  source_list_norm: "{{ source_list | map('string') | map('lower') | list }}"
  matched_source: >
    {% set d = desired_norm %}
    {% set cand = source_list | list %}
    {% set norm = source_list_norm %}
    {% set idx = (norm.index(d) if d in norm else none) %}
    {% if idx is not none %}
      {{ cand[idx] }}
    {% else %}
      {% set starts = [] %}
      {% for i in range(norm|length) %}
        {% if norm[i].startswith(d) %}{% set _ = starts.append(i) %}{% endif %}
      {% endfor %}
      {% if starts %}{{ cand[starts[0]] }}
      {% else %}
        {% set contains = [] %}
        {% for i in range(norm|length) %}
          {% if d in norm[i] %}{% set _ = contains.append(i) %}{% endif %}
        {% endfor %}
        {% if contains %}{{ cand[contains[0]] }}
        {% else %}{{ desired_input }}
        {% endif %}
      {% endif %}
    {% endif %}

sequence:
  # 1) Power on Virgin if off
  - alias: Power on Virgin if off
    if:
      - condition: state
        entity_id: media_player.virgin_tv
        state: "off"
    then:
      - service: media_player.turn_on
        target:
          entity_id: media_player.virgin_tv
      - wait_template: "{{ states(virgin) not in ['off','unavailable','unknown'] }}"
        timeout: "{{ virgin_power_on_timeout }}"
      - delay:
          seconds: "{{ virgin_settle_delay }}"

  # 2) Tune selected Virgin channel
  - alias: Tune Virgin channel
    service: media_player.play_media
    target:
      entity_id: media_player.virgin_tv
    data:
      media_content_type: channel
      media_content_id: "{{ desired_channel }}"

  # 3) Power on TV if off
  - alias: Power on TV if off
    if:
      - condition: state
        entity_id: media_player.lg_webos_smart_tv
        state: "off"
    then:
      - service: media_player.turn_on
        target:
          entity_id: media_player.lg_webos_smart_tv
      - wait_template: "{{ states(tv) not in ['off','unavailable','unknown'] }}"
        timeout: "{{ tv_power_on_timeout }}"
      - delay:
          seconds: "{{ tv_settle_delay }}"

  # 4) Wait for TV sources (optional)
  - alias: Wait for TV sources (optional)
    wait_template: >
      {{ (state_attr(tv, 'source_list') or []) | count > 0
         or states(tv) not in ['off','unavailable','unknown'] }}
    timeout: "{{ tv_source_list_timeout }}"
    continue_on_timeout: true

  # 5) Switch TV to fixed input
  - alias: Switch TV to Virgin(West Midlands) Set-Top Box
    service: media_player.select_source
    target:
      entity_id: media_player.lg_webos_smart_tv
    data:
      source: "{{ matched_source }}"

  # 6) Set Sonos Playbar volume
  - alias: Set Sonos volume
    service: media_player.volume_set
    target:
      entity_id: media_player.living_room_sonos
    data:
      volume_level: "{{ volume_level | float }}"

  - service: logbook.log
    data:
      name: "TV+Virgin+Sonos"
      message: >
        TV → '{{ matched_source }}' (fixed input '{{ desired_input }}').
        Virgin channel: '{{ desired_channel }}'.
        Sonos volume: {{ (volume_level | float) | round(2) }}.
      entity_id: media_player.lg_webos_smart_tv
