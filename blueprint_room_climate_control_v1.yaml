blueprint:
  name: Room Thermostat Temperature Control v2.23
  description: >
    Adjust the thermostat setpoint based on external temperature, room schedules,
    specific conditions, and room occupancy status with configurable occupancy detection and time-based offsets.
    Always applies a temporary override, then reverts to schedule after 10 minutes.
  domain: automation
  input:
    thermostat_inputs:
      name: '# Thermostat Inputs'
      collapsed: false
      input:
        thermostat:
          name: Target Thermostat
          selector:
            entity:
              integration: ramses_cc
              domain: climate
        scheduled_setpoint:
          name: Scheduled Setpoint Helper
          selector:
            entity:
              domain: sensor
              device_class: temperature
        external_temperature:
          name: External Temperature Sensor
          selector:
            entity:
              domain: sensor
              device_class: temperature
          default: sensor.accuweather_home_wind_chill_temperature
        delta_above_15:
          name: Delta for >15°C
          selector: { number: { min: -3, max: 3, step: 0.5 } }
          default: 0.5
        delta_above_10:
          name: Delta for >10°C
          selector: { number: { min: -3, max: 3, step: 0.5 } }
          default: 1
        delta_10_to_5:
          name: Delta for 10°C to 5°C
          selector: { number: { min: -3, max: 3, step: 0.5 } }
          default: 1.5
        delta_5_to_0:
          name: Delta for 5°C to 2°C
          selector: { number: { min: -3, max: 3, step: 0.5 } }
          default: 2
        delta_below_0:
          name: Delta for < 2°C
          selector: { number: { min: -3, max: 3, step: 0.5 } }
          default: 2.5
    occupancy_inputs:
      name: '# Occupancy Inputs'
      collapsed: false
      input:
        room_occupancy_sensor:
          name: Room Occupancy Sensor
          selector: { entity: { domain: binary_sensor } }
        unoccupied_duration:
          name: Unoccupied Duration (min)
          selector: { number: { min: 0, max: 59, step: 1 } }
          default: 10
        reoccupied_duration:
          name: Reoccupied Duration (min)
          selector: { number: { min: 0, max: 5, step: 1 } }
          default: 2
        weekday_morning_offset:
          name: Weekday Morning Offset (06:30–12:00)
          selector: { number: { min: -5, max: 0, step: 0.5 } }
          default: -0.5
        weekday_afternoon_offset:
          name: Weekday Afternoon Offset (12:00–16:30)
          selector: { number: { min: -5, max: 0, step: 0.5 } }
          default: -0.5
        weekday_evening_offset:
          name: Weekday Evening Offset (16:30–22:00)
          selector: { number: { min: -5, max: 0, step: 0.5 } }
          default: -0.5
        weekend_morning_offset:
          name: Weekend Morning Offset (06:30–12:00)
          selector: { number: { min: -5, max: 0, step: 0.5 } }
          default: -0.5
        weekend_afternoon_offset:
          name: Weekend Afternoon Offset (12:00–16:30)
          selector: { number: { min: -5, max: 0, step: 0.5 } }
          default: -0.5
        weekend_evening_offset:
          name: Weekend Evening Offset (16:30–22:00)
          selector: { number: { min: -5, max: 0, step: 0.5 } }
          default: -0.5
    misc_inputs:
      name: '# Misc Inputs'
      collapsed: false
      input:
        automation_delay:
          name: Automation Delay (s)
          selector: { number: { min: 0, max: 20, step: 1 } }
          default: 0

mode: restart

trigger:
  - platform: time_pattern
    minutes: "/1"

variables:
  thermostat: !input thermostat
  external_temperature_var: !input external_temperature
  scheduled_setpoint_var: !input scheduled_setpoint
  delta_above_15: !input delta_above_15
  delta_above_10: !input delta_above_10
  delta_10_to_5: !input delta_10_to_5
  delta_5_to_0: !input delta_5_to_0
  delta_below_0: !input delta_below_0
  occupancy_sensor: !input room_occupancy_sensor
  unoccupied_duration: !input unoccupied_duration
  weekday_morning_offset: !input weekday_morning_offset
  weekday_afternoon_offset: !input weekday_afternoon_offset
  weekday_evening_offset: !input weekday_evening_offset
  weekend_morning_offset: !input weekend_morning_offset
  weekend_afternoon_offset: !input weekend_afternoon_offset
  weekend_evening_offset: !input weekend_evening_offset
  automation_delay: !input automation_delay

  current_temperature: "{{ states(external_temperature_var) | float(0) }}"
  scheduled_setpoint: "{{ states(scheduled_setpoint_var) | float(0) }}"
  thermostat_name: "{{ state_attr(thermostat, 'friendly_name') or thermostat }}"
  thermostat_currentsetpoint: "{{ state_attr(thermostat, 'temperature') | float(default=0) }}"
  is_weekend: "{{ now().weekday() in [5, 6] }}"
  time_period: >
    {% set m = now().hour*60 + now().minute %}
    {% if 390 <= m < 720 %}morning
    {% elif 720 <= m < 990 %}afternoon
    {% elif 990 <= m < 1320 %}evening
    {% else %}none{% endif %}
  unoccupied_offset: >
    {% if time_period == 'morning' %}
      {{ (is_weekend and weekend_morning_offset or weekday_morning_offset) | float(0) }}
    {% elif time_period == 'afternoon' %}
      {{ (is_weekend and weekend_afternoon_offset or weekday_afternoon_offset) | float(0) }}
    {% elif time_period == 'evening' %}
      {{ (is_weekend and weekend_evening_offset or weekday_evening_offset) | float(0) }}
    {% else %}0{% endif %}
  is_unoccupied: >
    {% set s = occupancy_sensor %}
    {% if s and is_state(s, 'off') and states[s] is not none %}
      {{ ((as_timestamp(now()) - as_timestamp(states[s].last_changed)) / 60) >= (unoccupied_duration | int(0)) }}
    {% else %}
      false
    {% endif %}

condition:
  - condition: state
    entity_id: input_boolean.holiday_mode
    state: "off"

action:
  - condition: time
    before: "22:30:00"
    after: "06:30:00"

  - delay:
      seconds: "{{ automation_delay | int }}"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ current_temperature > 15 }}"
        sequence:
          - service: climate.set_temperature
            target: { entity_id: !input thermostat }
            data:
              temperature: "{{ scheduled_setpoint + delta_above_15 + (unoccupied_offset if is_unoccupied else 0) }}"
              preset_mode: temporary

      - conditions:
          - condition: template
            value_template: "{{ 10 < current_temperature <= 15 }}"
        sequence:
          - service: climate.set_temperature
            target: { entity_id: !input thermostat }
            data:
              temperature: "{{ scheduled_setpoint + delta_above_10 + (unoccupied_offset if is_unoccupied else 0) }}"
              preset_mode: temporary

      - conditions:
          - condition: template
            value_template: "{{ 5 < current_temperature <= 10 }}"
        sequence:
          - service: climate.set_temperature
            target: { entity_id: !input thermostat }
            data:
              temperature: "{{ scheduled_setpoint + delta_10_to_5 + (unoccupied_offset if is_unoccupied else 0) }}"
              preset_mode: temporary

      - conditions:
          - condition: template
            value_template: "{{ 0 < current_temperature <= 5 }}"
        sequence:
          - service: climate.set_temperature
            target: { entity_id: !input thermostat }
            data:
              temperature: "{{ scheduled_setpoint + delta_5_to_0 + (unoccupied_offset if is_unoccupied else 0) }}"
              preset_mode: temporary

      - conditions:
          - condition: template
            value_template: "{{ current_temperature <= 0 }}"
        sequence:
          - service: climate.set_temperature
            target: { entity_id: !input thermostat }
            data:
              temperature: "{{ scheduled_setpoint + delta_below_0 + (unoccupied_offset if is_unoccupied else 0) }}"
              preset_mode: temporary

  # after 10 minutes, always revert to schedule
  - delay: "00:10:00"
  - service: climate.set_hvac_mode
    target:
      entity_id: !input thermostat
    data:
      hvac_mode: follow_schedule
